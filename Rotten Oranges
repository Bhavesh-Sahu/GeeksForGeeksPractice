struct ele{
    int x,y,z;
};

class Solution 
{
    public:
    
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        queue<ele>Q;
        int NC=grid[0].size();
        int NR=grid.size();
        ele temp;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==2)
                    {
                        temp.x=i;
                        temp.y=j;
                        temp.z=0;
                        Q.push(temp);
                    }
            }
        }
        int mx=0;
        while(Q.size()!=0){
            temp=Q.front();
            int i=temp.x;int j=temp.y;int z=temp.z;
            if(i-1>=0 && grid[i-1][j]==1){
                temp.x=i-1;
                temp.y=j;
                temp.z=z+1;
                Q.push(temp);
                grid[i-1][j]=2;
                mx=z+1;
            }
            if(i+1<NR && grid[i+1][j]==1){
                temp.x=i+1;
                temp.y=j;
                 temp.z=z+1;
                Q.push(temp);
                grid[i+1][j]=2;
                mx=z+1;
            }
            if(j-1>=0 && grid[i][j-1]==1){
                temp.x=i;
                temp.y=j-1;
                 temp.z=z+1;
                 grid[i][j-1]=2;
                Q.push(temp);
                mx=z+1;
            }
            if(j+1<NC && grid[i][j+1]==1){
                temp.x=i;
                temp.y=j+1;
                 temp.z=z+1;
                 grid[i][j+1]=2;
                Q.push(temp);
                mx=z+1;
            }
            
            Q.pop();
        }
        
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1)
                    {
                        return -1;
                    }
            }
        }
        return mx;
    }
};
