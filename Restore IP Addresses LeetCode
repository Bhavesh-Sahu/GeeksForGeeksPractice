class Solution {
public:
    bool isvalid(string s){
        if(s.size()==1 && s[0]-'0'>=0 && s[0]-'0'<=9)
            return 1;
        else if(s.size()==2 && s[0]-'0'>0 && s[0]-'0'<=9 && s[1]-'0'>=0 && s[1]-'0'<=9)
            return 1;
        else if(s.size()==3 && s[0]-'0'>0 && s[0]<='2'){
            if(s[0]=='1' && s[1]-'0'>=0 && s[1]-'0'<=9 && s[2]>='0' && s[2]<='9')
                return 1;
            if(s[0]=='2' && s[1]>='0' && s[1]<='4' && s[2]>='0' && s[2]<='9')
                return 1;
            if(s[0]=='2' && s[1]=='5' && s[2]>='0' && s[2]<='5')
                return 1;
        }
        return 0;
    }
    vector<string> restoreIpAddresses(string s) {
        vector<string>vec;
        int n= s.size()-1;
        for(int i=0;i<3 && i<s.size();i++){
            string ch= s.substr(0,i+1);
            if(!isvalid(ch))
                continue;
            
            for(int j=i+1;j<i+4 && j<s.size();j++){
                string ch2= s.substr(i+1,j-i);
                cout<<ch2<<" ";
                if(!isvalid(ch2))
                    continue;
                
                for(int k=j+1;k<j+4 && k<s.size();k++){
                    string ch3= s.substr(j+1,k-j);
                    if(!isvalid(ch3))
                         continue;
                    if(k+1>n)
                        continue;
                    string ch4= s.substr(k+1);
                    
                    if(!isvalid(ch4))
                        continue;
                    
                    string ss = ch+'.'+ch2+'.'+ch3+'.'+ch4;
                    vec.push_back(ss);
                    
                }
            }
        }
        return vec;
    }
};
